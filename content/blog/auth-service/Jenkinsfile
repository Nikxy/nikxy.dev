def SRC_FOLDER = 'src'

pipeline {
    agent any

    tools {
        nodejs 'Node 18.x'
    }
    environment {
        // Check if node_modules exists
        TEST_NODE_MODULES_EXISTS = fileExists 'node_modules'
        SRC_NODE_MODULES_EXISTS = fileExists 'src/node_modules'
        // Check if AWS SAM exists
        AWS_SAM_EXISTS = fileExists 'venv/bin/sam'

        // AWS Settings
        AWS_REGION = 'il-central-1'
        AWS_STACK_NAME = 'auth-service'

        // SAM uploads template and code to the specified S3 bucket
        AWS_S3_BUCKET = 'my-cloudformation-bucket'
        AWS_S3_PREFIX = 'auth-service'
    }

    stages {
        //
        // Installing dependencies
        //
        stage('Install AWS SAM') {
            when { expression { AWS_SAM_EXISTS == 'false' } }
            steps {
                echo 'Installing AWS SAM'
                sh(returnStdout:true, script: 'python3 -m venv venv && venv/bin/pip install aws-sam-cli')
            }
        }
        stage('Install test npm dependencies') {
            when {
                anyOf {
                    changeset 'package.json';
                    changeset 'package-lock.json';
                    expression { TEST_NODE_MODULES_EXISTS == 'false' }
                }
            }
            steps {
                sh 'npm ci'
            }
        }
        stage('Install src npm dependencies') {
            when {
                anyOf {
                    changeset 'src/package.json';
                    changeset 'src/package-lock.json';
                    expression { SRC_NODE_MODULES_EXISTS == 'false' }
                }
            }
            steps {
                dir(SRC_FOLDER) { sh 'npm ci' }
            }
        }
        //
        // Running tests
        //
        stage('Unit Tests') {
            when {
                anyOf {
                    changeset 'src/**';
                    changeset 'tests/unit/**'
                }
            }
            steps {
                script {
                    def exitStatus = sh returnStatus: true, script: 'npm run test_ci:unit'
                    junit 'junit.xml'
                    if (exitStatus != 0) {
                        error 'Unit tests failed'
                    }
                }
            }
        }
        stage('SAM Integration Tests') {
            when {
                anyOf {
                    changeset 'src/**';
                    changeset 'tests/integration/**'
                }
            }

            steps {
                script {
                    // Start sam in the background
                    sh '''nohup venv/bin/sam local start-api \
                        --parameter-overrides ParameterKey=EnvironmentType,ParameterValue=test \
                        --warm-containers EAGER \
                        --container-host 172.17.0.1 --container-host-interface 0.0.0.0 \
                        --region ${AWS_REGION} -v /home/diana/dev/jenkins_workspace/auth.nikxy.dev \
                        > $WORKSPACE/sam.log 2>&1 &'''
                    // Wait for sam to finish initializing
                    sh '''#!/bin/bash
                        while [[ $(tail -n 1 sam.log) != *"CTRL+C"* ]]; do echo "waiting for sam" && sleep 1; done'''

                    // Run integration tests
                    def exitStatus = sh returnStatus: true, script: 'npm run test_ci:integration'
                    junit 'junit-integration.xml'
                    if (exitStatus != 0) {
                        error 'Integration tests failed'
                    }
                }
            }
        }
        //
        // Deployment
        //
        stage('Deploy To AWS') {
            when {
                anyOf { changeset 'src/**'; changeset 'template.yaml'}
            }
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'AWSJenkinsDeploy',
                    usernameVariable: 'AWS_ACCESS_KEY_ID',
                    passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                )]) {
                    sh 'venv/bin/sam deploy --stack-name ${AWS_STACK_NAME} --region ${AWS_REGION} \
                        --s3-bucket ${AWS_S3_BUCKET} --s3-prefix ${AWS_S3_PREFIX} \
                        --on-failure ROLLBACK --capabilities CAPABILITY_NAMED_IAM \
                        --no-progressbar'
                }
            }
        }
    }
}
